https://github.com/code-matt/redux-react-rails-boilerplate

TAKE THIS:
https://github.com/digital-telepathy/rails5-webpack-react-boilerplate

https://devhub.io/repos/cottonwoodcoding-webpack-rails-react

http://www.thegreatcodeadventure.com/building-a-simple-crud-app-with-react-redux-part-1/#table-of-contents


from webpack-rails
{
  "name": "webpack-rails-example",
  "version": "0.0.1",
  "license": "MIT",
  "dependencies": {
    "stats-webpack-plugin": "^0.4.3",
    "webpack": "^1.14.0",
    "webpack-dev-server": "^1.16.2"
  }
}

We want additional node modules

"devDependencies": {
    "autoprefixer": "^6.4.0",
    "babel-core": "^6.14.0",
    "babel-jest": "^14.1.0",
    "babel-loader": "^6.2.5",
    "babel-polyfill": "^6.13.0",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-react": "^6.11.1",
    "concurrently": "^2.2.0",
    "css-loader": "^0.24.0",
    "dotenv": "^2.0.0",
    "extract-text-webpack-plugin": "^1.0.1",
    "file-loader": "^0.9.0",
    "jest-cli": "^14.1.0",
    "node-sass": "^3.8.0",
    "postcss-loader": "^0.11.0",
    "react": "^15.3.1",
    "react-dom": "^15.3.1",
    "react-hot-loader": "^1.3.0",
    "react-test-renderer": "^15.3.1",
    "sass-loader": "^4.0.0",
    "stats-webpack-plugin": "^0.4.2",
    "style-loader": "^0.13.1",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.15.0"
  },


yarn add dotenv react react-dom

yarn add --dev  autoprefixer  babel-core babel-jest babel-loader babel-polyfill babel-preset-es2015 babel-preset-react

yarn add --dev concurrently css-loader extract-text-webpack-plugin file-loader jest-cli node-sass postcss-loader

yarn add --dev react-hot-loader react-test-renderer sass-loader style-loader

// needed for css
yarn add --dev resolve-url-loader

// needed for exposing jQuery
yarn add --dev expose-loader

ADD .babelrc

####### libraries
yarn add font-awesome

yarn add jquery@2.2.4

yarn add bootstrap-sass

yarn add summernote

yarn add jquery-dotdotdot

yarn add jquery.stellar

yarn add jquery-ui jquery-ui-touch-punch jquery-ujs jquery-waypoints

yarn add bootstrap-datetime-picker

######### IMPORTANT
yarn add --dev webpack-asset-pipeline

var path = require('path');
var webpack = require('webpack');
var autoprefixer = require('autoprefixer');
var StatsPlugin = require('stats-webpack-plugin');
const ExtractTextPlugin = require("extract-text-webpack-plugin");


// must match config.webpack.dev_server.port
var devServerPort = 3808;

// set NODE_ENV=production on the environment to add asset fingerprints
var production = process.env.NODE_ENV === 'production';

var config = {
    context: __dirname + "/../",
    entry: {
        global: ["./webpack/global.js", "./webpack/global.scss"],
        // Sources are expected to live in $app_root/webpack
        // 'application': './webpack/application.js'
    },

    output: {
        // Build assets directly in to public/webpack/, let webpack know
        // that all webpacked assets start with webpack/

        // must match config.webpack.output_dir
        path: path.join(__dirname, '..', 'public', 'webpack'),
        publicPath: '/webpack/',

        filename: production ? '[name]-[chunkhash].js' : '[name].js'
    },

    resolve: {
        modules: [
            path.resolve(__dirname, "webpack"),
            path.resolve(__dirname, "node_modules"),
            path.resolve(__dirname, "lib/assets"),
            path.resolve(__dirname, "vendor/assets/javascripts")],
        alias: {
            jquery: 'jquery/dist/jquery',
            stellar: "jquery.stellar/jquery.stellar"
        }
    },


    externals: {
        // This mean that require('jquery') will refer to global var jQuery
        'jquery': 'jQuery'
    },

    module: {
        loaders: [
            // Process .js and .jsx files for ES6 and React
            {
                test: /\.js$/,
                exclude: /(node_modules)/,
                loader: "babel?presets[]=react,presets[]=es2015"
            },
            // Embed images
            {
                test: /\.(jpe?g|png|gif|svg)$/i,
                loader: 'file?name=images/[name].[ext]'
            },
            // Process normal CSS files
            { test: /\.scss$/, use: ExtractTextPlugin.extract({
                    fallbackLoader: "style-loader",
                    loaders: ["css-loader?sourceMap", 'sass-loader?sourceMap'],
                    publicPath: "../"
                })
            },
            {
                test: /\.acss$/, // Only .css files
                loader: ExtractTextPlugin.extract("style!css!resolve-url")
                //, loaders: ['style-loader', 'css-loader', 'resolve-url-loader', 'postcss-loader']
                //loader: 'style!css!postcss'
            },
            // Process SASS files
            {
                test: /\.ascss$/,
                loader: ExtractTextPlugin.extract("style!css!resolve-url!sass")
                //loaders: ['style-loader', 'css-loader', 'resolve-url-loader', 'sass-loader?sourceMap', 'postcss-loader']
                //loader: 'style!css!sass!postcss'
            },
            // Embed fonts
            {
                test: /\.(woff|svg|ttf|eot)([\?]?.*)$/,
                loader: "file?name=fonts/[name].[ext]"
            }
        ]
    },


    plugins: [
        new ExtractTextPlugin(production ? '[name]-[chunkhash].css' : '[name].css'),
        // if you want a module available as variable in every module,
        // such as making $ and jQuery available in every module without writing require("jquery").
        // You should use ProvidePlugin.
        // Expose some modules globally to every module (so you don't have to explicitly require them)
        new webpack.ProvidePlugin({
            $: "jquery",
            jQuery: "jquery",
            jquery: "jquery",
            "window.jQuery": "jquery",
            React: "react"
        }),
        // must match config.webpack.manifest_filename
        new StatsPlugin('manifest.json', {
            // We only need assetsByChunkName
            chunkModules: false,
            source: false,
            chunks: false,
            modules: false,
            assets: true
        })]
};

if (production) {

    config.plugins.push(
    new webpack.NoErrorsPlugin(),
    new webpack.optimize.UglifyJsPlugin({
        compressor: { warnings: false },
        sourceMap: false
    }),
    new webpack.DefinePlugin({
        'process.env': { NODE_ENV: JSON.stringify('production') }
    }),
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.OccurenceOrderPlugin()
    );
} else {
    config.devServer = {
        port: devServerPort,
        headers: { 'Access-Control-Allow-Origin': '*' }
    };
    config.output.publicPath = '//localhost:' + devServerPort + '/webpack/';
    // Source maps
    config.devtool = 'cheap-module-eval-source-map';
}

module.exports = config;
